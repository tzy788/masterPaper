y1=c(8.92, 7.26, 6.27, 4.73,86.51, 51.77, 29.47, 13.62)
y2=c(8.75, 6.75, 5.57, 3.94,57.54, 34.14, 19.91, 10.5)
t.test(y1,y2)
data=read.csv('C:\\Users\\HP\\Documents\\WeChat Files\\wxid_go9qjs2pnccc21\\FileStorage\\File\\2023-03')
data=read.csv('C:\\Users\\HP\\Desktop\\try.csv')
View(data)
t.test(data$a,data$b)
ttest=t.test(data$a,data$b)
ttest$p.value
View(ttest)
?t.test
ttest=t.test(data$a,data$b,alternative = 'less')
ttest
ttest=t.test(data$a,data$b,alternative = 'greater')
ttest
View(data)
library(shiny); runApp('D:/shinyproject/master/master.R')
rm(list = ls())
data=read.csv('C:\\Users\\HP\\Documents\\WeChat Files\\wxid_go9qjs2pnccc21\\FileStorage\\File\\2023-03\\try.csv')
t.test(data$c,data$d)
getwd()
library(shiny); runApp('D:/shinyproject/master/master.R')
library(shiny); runApp('D:/shinyproject/master/master.R')
citation('org.Hs.eg.db')
citation()
citation('clusterProfiler')
citation('WGCNA')
citation('TCGAbiolinks')
citation('randomforest')
library(randomforest)
citation('visNetwork')
devtools::install_github("flash0926/mrhelp", force=TRUE)
mrhelp::install_mr()
message("connecting...")
con <- DBI::dbConnect(RPostgreSQL::PostgreSQL(), user = "flash0926",
password = "Kxh224975", host = "47.102.127.65",
port = 5433, dbname = "db4bce625fd84d40e3a17e5e7b83094c40MendelRCheck")
message("connect success")
form_name <- "mendelrregister"
a <- DBI::dbReadTable(con, form_name)
error_code <- -1
View(a)
table(a$access)
reg_code='20230205120547'
acc=7
reg_code %in% a$code
getToken2()
getToken2<-function ()
{
x <- Sys.info()
if (Sys.info()[1] != "Windows") {
x <- x[!names(x) %in% c("machine")]
if (x["user"] %in% c("NEW")) {
x <- x[!names(x) %in% c("nodename")]
}
}
if (!is.na(x["version"])) {
x <- x[!names(x) %in% c("version")]
}
user_name <- ""
if (!is.na(x["user"])) {
user_name <- x[names(x) %in% c("user")]
}
node_name <- ""
if (!is.na(x["user"])) {
node_name <- x[names(x) %in% c("nodename")]
}
x <- toupper(rev(do::Replace(do::Replace0(unique(x), " "),
".*-", "a")))
token <- paste0(paste0(LETTERS[1:length(x)], x), collapse = "")
token_md5 <- sapply(token, digest, algo = "md5")
final_token <- paste0(as.character(token_md5), "_", node_name,
"_", user_name)
return(final_token)
}
getToken2()
Sys.info()[1]
Sys.info()
!is.na(x["version"])
x <- Sys.info()
!is.na(x["version"])
x <- x[!names(x) %in% c("version")]
x
user_name <- ""
if (!is.na(x["user"])) {
user_name <- x[names(x) %in% c("user")]
}
node_name <- ""
if (!is.na(x["user"])) {
node_name <- x[names(x) %in% c("nodename")]
}
x <- toupper(rev(do::Replace(do::Replace0(unique(x), " "),
".*-", "a")))
token <- paste0(paste0(LETTERS[1:length(x)], x), collapse = "")
x
token_md5 <- sapply(token, digest::digest, algo = "md5")
final_token <- paste0(as.character(token_md5), "_", node_name,
"_", user_name)
final_token
getToken2<-function ()
{
x <- Sys.info()
if (Sys.info()[1] != "Windows") {
x <- x[!names(x) %in% c("machine")]
if (x["user"] %in% c("NEW")) {
x <- x[!names(x) %in% c("nodename")]
}
}
if (!is.na(x["version"])) {
x <- x[!names(x) %in% c("version")]
}
user_name <- ""
if (!is.na(x["user"])) {
user_name <- x[names(x) %in% c("user")]
}
node_name <- ""
if (!is.na(x["user"])) {
node_name <- x[names(x) %in% c("nodename")]
}
x <- toupper(rev(do::Replace(do::Replace0(unique(x), " "),
".*-", "a")))
token <- paste0(paste0(LETTERS[1:length(x)], x), collapse = "")
token_md5 <- sapply(token, digest::digest, algo = "md5")
final_token <- paste0(as.character(token_md5), "_", node_name,
"_", user_name)
return(final_token)
}
getToken2()
access_dat <- dplyr::filter(a, code == reg_code)
access <- access_dat$access
token <- getToken2()
current_time <- format(Sys.time(), "%Y%m%d%H%M%S")
sql_str <- NA
is.na(access_dat$token) || access_dat$token ==
""
paste0("UPDATE mendelrregister SET time='",
current_time, "',token='", token, "' WHERE code='",
reg_code, "';")
paste0("UPDATE mendelrregister SET time='",
current_time, "',token='", token,"',access='", acc, "' WHERE code='",
reg_code, "';")
colnames(a)
usetime=-1
useintaobao='FALSE'
paste0("UPDATE mendelrregister SET time='",
current_time, "',token='", token,"',access='", acc,
"',usetime='", usetime,
"',useintaobao='", useintaobao,
"' WHERE code='",
reg_code, "';")
sql_str <- paste0("UPDATE mendelrregister SET time='",
current_time, "',token='", token,"',access='", acc,
"',usetime='", usetime,
"',useintaobao='", useintaobao,
"' WHERE code='",
reg_code, "';")
DBI::dbSendQuery(con, sql_str)
reg_code='20230205120547'
acc=7
usetime=-1
useintaobao='FALSE'
message("connecting...")
con <- DBI::dbConnect(RPostgreSQL::PostgreSQL(), user = "flash0926",
password = "Kxh224975", host = "47.102.127.65",
port = 5433, dbname = "db4bce625fd84d40e3a17e5e7b83094c40MendelRCheck")
message("connect success")
form_name <- "mendelrregister"
a <- DBI::dbReadTable(con, form_name)
error_code <- -1
message("regeisting...")
access_dat <- dplyr::filter(a, code == reg_code)
access <- access_dat$access
token <- getToken2()
current_time <- format(Sys.time(), "%Y%m%d%H%M%S")
sql_str <- NA
sql_str <- paste0("UPDATE mendelrregister SET time='",
current_time, "',token='", token,"',access='", acc,
"',usetime='", usetime,
"',useintaobao='", useintaobao,
"' WHERE code='",
reg_code, "';")
DBI::dbSendQuery(con, sql_str)
a <- DBI::dbReadTable(con, form_name)
library(MendelR)
devtools::install_github("flash0926/mrhelp", force=TRUE)
mrhelp::install_mr()
MendelR::smr_run()
MendelR::mv_analysis()
as.numeric(Sys.getenv("MENDELR_ACCESS"))
as.numeric(format(Sys.time(), "%Y%m%d%H%M%S"))
as.numeric(Sys.getenv("MENDELR_ACCESS_time"))
Sys.setenv(MENDELR_ACCESS_time = format(Sys.time(), "%Y%m%d%H%M%S"))
MendelR::smr_run()
Sys.setenv(MENDELR_ACCESS_time = format(Sys.time(), "%Y%m%d%H%M%S"))
MendelR::smr_run()
Sys.setenv(MENDELR_ACCESS_time = format(Sys.time(), "%Y%m%d%H%M%S"))
current_time <- as.numeric(format(Sys.time(), "%Y%m%d%H%M%S"))
last_use_time <- as.numeric(Sys.getenv("MENDELR_ACCESS_time"))
current_time - last_use_time > 60
Sys.setenv(MENDELR_ACCESS_time = format(Sys.time(), "%Y%m%d%H%M%S"))
current_time <- as.numeric(format(Sys.time(), "%Y%m%d%H%M%S"))
last_use_time <- as.numeric(Sys.getenv("MENDELR_ACCESS_time"))
if (current_time - last_use_time > 60) {
return(-1)
}
MendelR::smr_run()
reg_code='20230205120547'
acc=13
usetime=-1
useintaobao='FALSE'
message("connecting...")
con <- DBI::dbConnect(RPostgreSQL::PostgreSQL(), user = "flash0926",
password = "Kxh224975", host = "47.102.127.65",
port = 5433, dbname = "db4bce625fd84d40e3a17e5e7b83094c40MendelRCheck")
message("connect success")
form_name <- "mendelrregister"
a <- DBI::dbReadTable(con, form_name)
error_code <- -1
message("regeisting...")
access_dat <- dplyr::filter(a, code == reg_code)
access <- access_dat$access
token <- getToken2()
current_time <- format(Sys.time(), "%Y%m%d%H%M%S")
sql_str <- NA
sql_str <- paste0("UPDATE mendelrregister SET time='",
current_time, "',token='", token,"',access='", acc,
"',usetime='", usetime,
"',useintaobao='", useintaobao,
"' WHERE code='",
reg_code, "';")
DBI::dbSendQuery(con, sql_str)
DBI::dbDisconnect(con)
MendelR::smr_run()
MendelR::smr_run()
table(a$access)
Sys.getenv("MENDELR_ACCESS_time")
reg_code='20230205120547'
acc=15
usetime=-1
useintaobao='FALSE'
message("connecting...")
con <- DBI::dbConnect(RPostgreSQL::PostgreSQL(), user = "flash0926",
password = "Kxh224975", host = "47.102.127.65",
port = 5433, dbname = "db4bce625fd84d40e3a17e5e7b83094c40MendelRCheck")
message("connect success")
form_name <- "mendelrregister"
a <- DBI::dbReadTable(con, form_name)
error_code <- -1
message("regeisting...")
access_dat <- dplyr::filter(a, code == reg_code)
access <- access_dat$access
token <- getToken2()
current_time <- format(Sys.time(), "%Y%m%d%H%M%S")
sql_str <- NA
sql_str <- paste0("UPDATE mendelrregister SET time='",
current_time, "',token='", token,"',access='", acc,
"',usetime='", usetime,
"',useintaobao='", useintaobao,
"' WHERE code='",
reg_code, "';")
DBI::dbSendQuery(con, sql_str)
DBI::dbDisconnect(con)
MendelR::smr_run()
library(ggplot2)
library(ggsignif)
library(tidyverse)
library(dplyr)
library(ggpubr)
library(car)
load('D:\\singlecell\\scRNA_LUAD/luad_GSE131907_tLUNG.rdata')
library(Seurat)
View(luad)
View(luad@meta.data)
DimPlot(luad,group.by = 'label1',label = T)
pubdata=luad
rm('luad')
setwd("G:\\20220322singlecell\\SeuratObjects")
for (i in 1:9) {
load(paste0("cluster_",i,"_SeuratObject.Rdata"))
if(!exists("allCellType")){
allCellType=luad@meta.data
}else{
allCellType=rbind(allCellType,luad@meta.data)
}
}
rm('luad')
pbmc=readRDS('G:\\scRNA-PBMC/scRNA2_H.rds')
View(pbmc)
View(pbmc@meta.data)
View(pbmc@meta.data)
table(pbmc$label1)
dim(pbmc@meta.data)
table(pbmc$orig.ident)
12666+10540+5051+8496
View(allCellType)
allCellType=allCellType[,c(1,2,3,13)]
pbmcCelltype=pbmc@meta.data
View(pbmcCelltype)
pbmcCelltype=pbmcCelltype[,c(1,2,3,11)]
pubCelltype=pubdata@meta.data
View(pubCelltype)
pubCelltype=pubCelltype[,c(1,2,3,11)]
colnames(allCellType)[4]='celltype'
colnames(pbmcCelltype)[4]='celltype'
colnames(pubCelltype)[4]='celltype'
allCellType$orig='HX_LUAD'
pubCelltype$orig='PUB_LUAD'
pbmcCelltype$orig='HX_PBMC'
?rbind
CellAnnotationResults=rbind(allCellType,pbmcCelltype,pubCelltype)
View(CellAnnotationResults)
save(CellAnnotationResults,file = 'E:\\研三上收录文件\\毕业项目\\github\\chapter3/CellAnnotationResults.rdata')
rm(list = ls())
setwd('D:\\Rtutorial1\\WGCNA_LUAD_2\\forEsembleLearning/')
data=read.csv("result1.csv")
######DNT,WGCNA,DEG指标比较######
accuracy=data[data$index=='Accuracy'&data$algorithm!='public data',]
f1=data[data$index=='F1-score'&data$algorithm!='public data',]
auc=data[data$index=='AUC'&data$algorithm!='public data',]
#在图中添加显著性值
getSig1<-function(data){
i=1
pvalue=c()
while (i<nrow(data)) {
w=wilcox.test(x=as.numeric(data[i,c(4:13)]),y=as.numeric(data[i+1,c(4:13)]))
pvalue=c(pvalue,w$p.value)
w=wilcox.test(x=as.numeric(data[i,c(4:13)]),y=as.numeric(data[i+2,c(4:13)]))
pvalue=c(pvalue,w$p.value)
i=i+3
}
pvalue=round(pvalue,5)
}
getSig1(accuracy)
#在图中添加显著性值
getSig1<-function(data){
i=1
pvalue=c()
while (i<nrow(data)) {
w=wilcox.test(x=as.numeric(data[i,c(4:13)]),y=as.numeric(data[i+1,c(4:13)]))
pvalue=c(pvalue,w$p.value)
w=wilcox.test(x=as.numeric(data[i,c(4:13)]),y=as.numeric(data[i+2,c(4:13)]))
pvalue=c(pvalue,w$p.value)
i=i+3
}
pvalue=round(pvalue,5)
return(pvalue)
}
getSig1(accuracy)
View(accuracy)
?matrix
colnames(accuracy)
#在图中添加显著性值
getSig1<-function(data){
i=1
pvalue=c()
res=as.data.frame(matrix(ncol = 3,nrow = 30))
colnames(res)=c('celltype','group','pvalue')
while (i<nrow(data)) {
w=wilcox.test(x=as.numeric(data[i,c(4:13)]),y=as.numeric(data[i+1,c(4:13)]))
res$celltype=data[i,1]
res$group=paste0(data[i,2],data[i+1,2],collapse = '-')
res$pvalue=w$p.value
w=wilcox.test(x=as.numeric(data[i,c(4:13)]),y=as.numeric(data[i+2,c(4:13)]))
res$celltype=data[i,1]
res$group=paste0(data[i,2],data[i+2,2],collapse = '-')
res$pvalue=w$p.value
i=i+3
}
res$pvalue=round(res$pvalue,5)
return(res)
}
test=getSig1(accuracy)
View(test)
#在图中添加显著性值
getSig1<-function(data){
i=1
pvalue=c()
res=as.data.frame(matrix(ncol = 3,nrow = 30))
colnames(res)=c('celltype','group','pvalue')
while (i<nrow(data)) {
w=wilcox.test(x=as.numeric(data[i,c(4:13)]),y=as.numeric(data[i+1,c(4:13)]))
res$celltype[i]=data[i,1]
res$group[i]=paste0(data[i,2],data[i+1,2],collapse = '-')
res$pvalue[i]=w$p.value
w=wilcox.test(x=as.numeric(data[i,c(4:13)]),y=as.numeric(data[i+2,c(4:13)]))
res$celltype[i+1]=data[i,1]
res$group[i+1]=paste0(data[i,2],data[i+2,2],collapse = '-')
res$pvalue[i+1]=w$p.value
i=i+3
}
res$pvalue=round(res$pvalue,5)
return(res)
}
test=getSig1(accuracy)
View(test)
View(test)
View(test)
?paste0
#在图中添加显著性值
getSig1<-function(data){
i=1
res=as.data.frame(matrix(ncol = 3,nrow = 30))
colnames(res)=c('celltype','group','pvalue')
while (i<nrow(data)) {
w=wilcox.test(x=as.numeric(data[i,c(4:13)]),y=as.numeric(data[i+1,c(4:13)]))
res$celltype[i]=data[i,1]
res$group[i]=paste0(data[i,2],data[i+1,2],collapse = '_')
res$pvalue[i]=w$p.value
w=wilcox.test(x=as.numeric(data[i,c(4:13)]),y=as.numeric(data[i+2,c(4:13)]))
res$celltype[i+1]=data[i,1]
res$group[i+1]=paste0(data[i,2],data[i+2,2],collapse = '_')
res$pvalue[i+1]=w$p.value
i=i+3
}
res$pvalue=round(res$pvalue,5)
return(res)
}
test=getSig1(accuracy)
View(test)
paste0(accuracy[1,2],accuracy[1+1,2],collapse = '_')
paste0(accuracy[1,2],'_',accuracy[1+1,2])
#在图中添加显著性值
getSig1<-function(data){
i=1
j=1
pvalue=c()
res=as.data.frame(matrix(nrow = 30,ncol = 3))
colnames(res)=c('celltype','group','pvalue')
while (i<nrow(data)) {
w=wilcox.test(x=as.numeric(data[i,c(4:13)]),y=as.numeric(data[i+1,c(4:13)]))
pvalue=c(pvalue,w$p.value)
res$celltype[j]=data[i,1]
res$group[j]=paste0(data[i,2],'_',data[i+1,2])
j=j+1
w=wilcox.test(x=as.numeric(data[i,c(4:13)]),y=as.numeric(data[i+2,c(4:13)]))
pvalue=c(pvalue,w$p.value)
res$celltype[j]=data[i,1]
res$group[j]=paste0(data[i,2],'_',data[i+2,2])
j=j+1
i=i+3
}
pvalue=round(pvalue,5)
res$pvalue=pvalue
return(res)
}
test=getSig1(accuracy)
View(test)
accuracy_res=getSig1(accuracy)
accuracy_res$index='accuracy'
View(accuracy_res)
f1_res=getSig1(f1)
f1_res$index='F1-score'
auc_res=getSig1(auc)
auc_res$index='AUC'
HX_data_sig=rbind(accuracy_res,f1_res,auc_res)
View(HX_data_sig)
HX_data_sig$source='huaxi'
View(HX_data_sig)
######公共数据集比较######
accuracy=data[data$index=='Accuracy'& (data$algorithm=='DNT' | data$algorithm=='public data'),]
f1=data[data$index=='F1-score'& (data$algorithm=='DNT' | data$algorithm=='public data'),]
auc=data[data$index=='AUC'& (data$algorithm=='DNT' | data$algorithm=='public data'),]
accuracy$algorithm[accuracy$algorithm=='DNT']='HX'
accuracy$algorithm[accuracy$algorithm=='public data']='Pub'
f1$algorithm[f1$algorithm=='DNT']='HX'
f1$algorithm[f1$algorithm=='public data']='Pub'
auc$algorithm[auc$algorithm=='DNT']='HX'
auc$algorithm[auc$algorithm=='public data']='Pub'
View(accuracy)
#导出加显著性值实验结果
getSig2<-function(data){
i=1
j=1
pvalue=c()
res=as.data.frame(matrix(nrow = 15,ncol = 3))
colnames(res)=c('celltype','group','pvalue')
while (i<nrow(data)) {
w=wilcox.test(x=as.numeric(data[i,c(4:13)]),y=as.numeric(data[i+1,c(4:13)]))
pvalue=c(pvalue,w$p.value)
res$celltype[j]=data[i,1]
res$group[j]=paste0(data[i,2],'_',data[i+1,2])
j=j+1
i=i+2
}
pvalue=round(pvalue,5)
res$pvalue=pvalue
return(res)
}
test=getSig2(accuracy)
View(test)
accuracy_res=getSig2(accuracy)
accuracy_res$index='accuracy'
f1_res=getSig2(f1)
f1_res$index='F1-score'
auc_res=getSig2(auc)
auc_res$index='AUC'
pub_data_sig=rbind(accuracy_res,f1_res,auc_res)
pub_data_sig$source='public data'
View(pub_data_sig)
save(data,HX_data_sig,pub_data_sig,file = 'E:\\研三上收录文件\\毕业项目\\github\\chapter3/ResultsofAllExperiments.rdata')
View(data)
View(data)
data=data[,-c(14,15)]
save(data,HX_data_sig,pub_data_sig,file = 'E:\\研三上收录文件\\毕业项目\\github\\chapter3/ResultsofAllExperiments.rdata')
rm(list = ls())
setwd('E:\\研三上收录文件\\毕业项目\\github\\chapter2/')
LUAD_AfterPreProcess=read.csv('./LUAD_AfterPreProcess.csv')
save(LUAD_AfterPreProcess,file = 'LUAD_AfterPreProcess.rdata')
LUAD_Raw data_TPM=read.csv('LUAD_Raw data_TPM.csv')
LUAD_Raw data_TPM=read.csv('./LUAD_Raw_data_TPM.csv')
LUAD_Raw_data_TPM=read.csv('./LUAD_Raw_data_TPM.csv')
save(LUAD_Raw_data_TPM,file = 'LUAD_Raw_data_TPM.rdata')
